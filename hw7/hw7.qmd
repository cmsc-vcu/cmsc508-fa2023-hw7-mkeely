---
title: Homework 7 - Creating a resume database
author: Mattie Keely
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This is a document related to a Resume Database for a company. It first loads in credentials for the database and establishes a connection using this information. It also contains an overview of the database as well as a Crow's Foot diagram to detail the entities and relationships. Finally, this document also contains sample data and queries. 


GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-mkeely 

```{python}
#| eval: true
# tells quarto to run as Python but do not show it 
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
# looks for errors if you find none in .env file 
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

The project was assigned by the sensei who has hopes of creating a company-wide shared resume to amplify the skills and capabilities of all employees, as well as their future goals. The database includes tables for skills and certifications, employees, and roles, with tables to link employees with skills and roles via foreign keys. The database also supports tracking skill acquisition and anticipated dates of acquisation, aiding in skill development.

## Crows-foot diagram

(add a description of the diagram and what the reader is seeing.)

```{mermaid}
erDiagram
  PEOPLE {
        int people_id
        string last_name
        string first_name
        string email
        string linkedin_URL
        string headshot_URL
        string discord_handle
        string brief_bio
        string date_joined
    }

    ROLES {
        int role_id
        string role_name
        int sort_id
    }

    SKILLS {
        int skill_id
        string skill_name
        string description
        string tag
        string URL
        string time_commitment
    }

    PEOPLE }o--o{ SKILLS : have
    PEOPLE }|--|{ ROLES : act_in


```

## Examples of data in the database


### People table

The *people* table contains elements that describe the employees at the company. It gives insight into personal information such as first name and last name. It includes contact information via an email, and social media information for Linkedin and Discord. You can view the employee with a link to their headshot, and learn more about them with the brief bio and date joined fields. 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe the many talents across the company. It contains the name of the skill, a short description of what the skill entails, and the time commitment that comes with obtaining the skill. Skills are categorized by tags. You can find out more about a skill by visiting its URL. 


Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe different roles within the company. Each role is identified by a unique ID, and also contains a sort ID.  

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from roles;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries


# List skill names, tags, and descriptions ordered by name



```{python}
#| echo: false
#| eval: true

sql = f"""
select name, tag, description 
from skills
order by name;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```



### List people names and email addresses ordered by last_name


```{python}
#| echo: false
#| eval: true

sql = f"""
select people_first_name, people_last_name, email
from people
order by people_last_name;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```



### List skill names of Person 1

```{python}
#| echo: false
#| eval: true

sql = f"""
SELECT 
    s.name 
FROM 
    peopleskills ps
    JOIN skills s ON (ps.skills_id = s.id)
WHERE 
    ps.people_id = 1;

"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```



### List people names with Skill 6

```{python}
#| echo: false
#| eval: true

sql = f"""


SELECT 
    people_last_name, people_first_name
FROM
    people a
    LEFT JOIN peopleskills b ON (a.people_id = b.people_id)
WHERE
    b.skills_id = 6;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List people with a DEVELOPER role


```{python}
#| echo: false
#| eval: true

sql = f"""

SELECT 
    people_last_name, people_first_name
FROM
    people a
    LEFT JOIN peopleroles b ON (a.people_id = b.people_id)
WHERE
    b.role_id = 2;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List names and email addresses of people without skills


```{python}
#| echo: false
#| eval: true

sql = f"""

SELECT 
    people_last_name, email
from
    people a
        left join peopleskills b on (a.people_id=b.people_id)
WHERE
    b.people_id IS NULL 
; 
 
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```





### List names and tags of unused skills


```{python}
#| echo: false
#| eval: true

sql = f"""

SELECT 
    name, tag
from
    skills a
        left join peopleskills b on (a.id=b.skills_id)
WHERE
    b.skills_id IS NULL 
; 
 
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```




### List people names and skill names with the BOSS role



```{python}
#| echo: false
#| eval: true

sql = f"""


SELECT 
    p.people_last_name, p.people_first_name, s.name 
FROM
    people p
JOIN
    peopleroles pr ON (p.people_id = pr.people_id)
JOIN
    roles r ON (pr.role_id = r.role_id)
LEFT JOIN
    peopleskills ps ON p.people_id = ps.people_id
LEFT JOIN
    skills s ON ps.skills_id = s.id
WHERE
    r.role_id = 5;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```








### List ids and names of unused roles


```{python}
#| echo: false
#| eval: true

sql = f"""

SELECT 
    a.role_id, a.role_name
from
    roles a
        left join peopleroles b on (a.role_id=b.role_id)
WHERE
    b.role_id IS NULL 
; 
 
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```



## Reflection


I feel like I gained a lot of experience with SQL and database design completed the first part of the assignment (the ddl part). It reiterated SQL commands that I was assessed on in the previous quiz, so it was good to see those commands I studied in practice. The SQL queries, however, added an additional layer of complexity that required more of me than the ddl file. As a whole, it was interesting to see what a database can represent and manipulate, which overall increased my confidence and experience with databases. 